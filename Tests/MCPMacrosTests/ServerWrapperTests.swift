#if canImport(MCPMacros)
import MacroTesting
import SwiftSyntaxMacros
import SwiftSyntaxMacrosTestSupport
import XCTest

final class ServerWrapperTests: MacroBaseTestCase {
    
    func testAutoGeneratedWrapperMethod() {
        assertMacro {
            """
            @Server(name: "TestServer", version: "1.0.0")
            public struct MyServer {
                @Tool(name: "echo", description: "Echo tool")
                var echoTool: Tool
                
                func echoToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    let message = arguments?["message"]?.stringValue ?? "No message"
                    return [.text("Echo: \\(message)")]
                }
                
                // 래퍼 메서드가 자동으로 생성됨
            }
            """
        } expansion: {
            #"""
            public struct MyServer {
                var echoTool: Tool {
                    get {
                        let tool = Tool(
                            name: "echo",
                            description: "Echo tool",
                            inputSchema: nil
                        )
                        return tool
                    }
                }
                
                func echoToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    let message = arguments?["message"]?.stringValue ?? "No message"
                    return [.text("Echo: \(message)")]
                }

                /// 서버 인스턴스
                fileprivate(set) public var server: Server = Server(
                    name: "TestServer",
                    version: "1.0.0",
                    capabilities: .default,
                    configuration: .default
                )

                /// 서버 초기화 및 도구 등록
                /// - Parameter additionalSetup: 추가 설정을 위한 선택적 클로저
                /// - Returns: 초기화된 서버 인스턴스
                public func initializeServer(additionalSetup: ((Server) async throws -> Void)? = nil) async throws -> Server {
                    // echo 도구 등록
                server.registerTool(
                    self.echoTool,
                    handler: { [weak self] arguments in
                        guard let self = self else {
                            throw MCPError.internalError("Server was deallocated")
                        }
                        return try await self.echoToolHandler(arguments: arguments)
                    }
                    )

                    // 추가 설정 수행
                    if let setup = additionalSetup {
                        try await setup(server)
                    }

                    return server
                }

                /// 서버 시작 (초기화 포함)
                /// - Parameters:
                ///   - transport: 사용할 트랜스포트
                ///   - setup: 추가 설정을 위한 선택적 클로저
                /// - Returns: 시작된 서버 인스턴스
                public func startServer(
                    transport: any Transport,
                    setup: ((Server) async throws -> Void)? = nil
                ) async throws -> Server {
                    let initializedServer = try await initializeServer(additionalSetup: setup)
                    try await initializedServer.start(transport: transport)
                    return initializedServer
                }
                
                // 래퍼 메서드가 자동으로 생성됨
            }
            """#
        }
    }
    
    func testServerWithExtension() {
        assertMacro {
            """
            // ServerWrapper.swift
            public protocol ServerProvider {
                func createAndStartServer(transport: any Transport) async throws -> Server
            }

            // 모든 @Server 매크로가 적용된 타입에 대한 확장
            extension ServerProvider {
                public func createAndStartServer(transport: any Transport) async throws -> Server {
                    fatalError("이 메서드는 @Server 매크로가 적용된 타입에서 구현해야 합니다")
                }
            }

            @Server(name: "MyExtendedServer", version: "1.0.0")
            public struct ExtendedServer: ServerProvider {
                @Tool(name: "hello", description: "Simple greeting tool")
                var helloTool: Tool
                
                func helloToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    return [.text("Hello, world!")]
                }
            }
            """
        } expansion: {
            """
            // ServerWrapper.swift
            public protocol ServerProvider {
                func createAndStartServer(transport: any Transport) async throws -> Server
            }

            // 모든 @Server 매크로가 적용된 타입에 대한 확장
            extension ServerProvider {
                public func createAndStartServer(transport: any Transport) async throws -> Server {
                    fatalError("이 메서드는 @Server 매크로가 적용된 타입에서 구현해야 합니다")
                }
            }
            public struct ExtendedServer: ServerProvider {
                var helloTool: Tool {
                    get {
                        let tool = Tool(
                            name: "hello",
                            description: "Simple greeting tool",
                            inputSchema: nil
                        )
                        return tool
                    }
                }
                
                func helloToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    return [.text("Hello, world!")]
                }

                /// 서버 인스턴스
                fileprivate(set) public var server: Server = Server(
                    name: "MyExtendedServer",
                    version: "1.0.0",
                    capabilities: .default,
                    configuration: .default
                )

                /// 서버 초기화 및 도구 등록
                /// - Parameter additionalSetup: 추가 설정을 위한 선택적 클로저
                /// - Returns: 초기화된 서버 인스턴스
                public func initializeServer(additionalSetup: ((Server) async throws -> Void)? = nil) async throws -> Server {
                    // hello 도구 등록
                server.registerTool(
                    self.helloTool,
                    handler: { [weak self] arguments in
                        guard let self = self else {
                            throw MCPError.internalError("Server was deallocated")
                        }
                        return try await self.helloToolHandler(arguments: arguments)
                    }
                    )

                    // 추가 설정 수행
                    if let setup = additionalSetup {
                        try await setup(server)
                    }

                    return server
                }

                /// 서버 시작 (초기화 포함)
                /// - Parameters:
                ///   - transport: 사용할 트랜스포트
                ///   - setup: 추가 설정을 위한 선택적 클로저
                /// - Returns: 시작된 서버 인스턴스
                public func startServer(
                    transport: any Transport,
                    setup: ((Server) async throws -> Void)? = nil
                ) async throws -> Server {
                    let initializedServer = try await initializeServer(additionalSetup: setup)
                    try await initializedServer.start(transport: transport)
                    return initializedServer
                }
            }
            """
        }
    }
}
#endif
