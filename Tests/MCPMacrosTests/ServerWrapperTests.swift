#if canImport(MCPMacros)
import MacroTesting
import SwiftSyntaxMacros
import SwiftSyntaxMacrosTestSupport
import XCTest

final class ServerWrapperTests: MacroBaseTestCase {
    
    func testAutoGeneratedWrapperMethod() {
        assertMacro {
            """
            @Server(name: "TestServer", version: "1.0.0")
            public struct MyServer {
                @Tool(name: "echo", description: "Echo tool")
                var echoTool: Tool
                
                func echoToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    let message = arguments?["message"]?.stringValue ?? "No message"
                    return [.text("Echo: \\(message)")]
                }
                
                // 래퍼 메서드가 자동으로 생성됨
            }
            """
        } expansion: {
            #"""
            public struct MyServer {
                var echoTool: Tool {
                    get {
                        let tool = Tool(
                            name: "echo",
                            description: "Echo tool",
                            inputSchema: nil
                        )
                        return tool
                    }
                }
                
                func echoToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    let message = arguments?["message"]?.stringValue ?? "No message"
                    return [.text("Echo: \(message)")]
                }
                
                // 래퍼 메서드가 자동으로 생성됨
            }

            /// 서버 인스턴스 생성
            func createServer() -> Server {
                let server = Server(
                    name: "TestServer",
                    version: "1.0.0",
                    capabilities: .default,
                    configuration: .default
                )
                // echo 도구 등록
                server.registerTool(
                    self.echoTool,
                    handler: { [weak self] arguments in
                        guard let self = self else {
                            throw MCPError.internalError("Server was deallocated")
                        }
                        return try await self.echoToolHandler(arguments: arguments)
                    }
                )

                return server
            }

            /// 서버 시작
            /// - Parameter transport: 사용할 트랜스포트
            /// - Returns: 시작된 서버 인스턴스
            func startServer(transport: any Transport) async throws -> Server {
                let server = createServer()
                try await server.start(transport: transport)
                return server
            }

            /// 서버를 생성하고 시작하는 래퍼 메서드
            /// 다른 파일에서 접근할 수 있도록 public으로 선언
            /// - Parameter transport: 사용할 트랜스포트
            /// - Returns: 시작된 서버 인스턴스
            public func createAndStartServer(transport: any Transport) async throws -> Server {
                // 매크로가 생성한 함수 호출
                let server = createServer()
                try await server.start(transport: transport)
                return server
            }
            """#
        }
    }
    
    func testServerWithExtension() {
        assertMacro {
            """
            // ServerWrapper.swift
            public protocol ServerProvider {
                func createAndStartServer(transport: any Transport) async throws -> Server
            }

            // 모든 @Server 매크로가 적용된 타입에 대한 확장
            extension ServerProvider {
                public func createAndStartServer(transport: any Transport) async throws -> Server {
                    fatalError("이 메서드는 @Server 매크로가 적용된 타입에서 구현해야 합니다")
                }
            }

            @Server(name: "MyExtendedServer", version: "1.0.0")
            public struct ExtendedServer: ServerProvider {
                @Tool(name: "hello", description: "Simple greeting tool")
                var helloTool: Tool
                
                func helloToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    return [.text("Hello, world!")]
                }
            }
            """
        } expansion: {
            """
            // ServerWrapper.swift
            public protocol ServerProvider {
                func createAndStartServer(transport: any Transport) async throws -> Server
            }

            // 모든 @Server 매크로가 적용된 타입에 대한 확장
            extension ServerProvider {
                public func createAndStartServer(transport: any Transport) async throws -> Server {
                    fatalError("이 메서드는 @Server 매크로가 적용된 타입에서 구현해야 합니다")
                }
            }
            public struct ExtendedServer: ServerProvider {
                var helloTool: Tool {
                    get {
                        let tool = Tool(
                            name: "hello",
                            description: "Simple greeting tool",
                            inputSchema: nil
                        )
                        return tool
                    }
                }
                
                func helloToolHandler(arguments: [String: Value]?) async throws -> [Tool.Content] {
                    return [.text("Hello, world!")]
                }
            }

            /// 서버 인스턴스 생성
            func createServer() -> Server {
                let server = Server(
                    name: "MyExtendedServer",
                    version: "1.0.0",
                    capabilities: .default,
                    configuration: .default
                )
                // hello 도구 등록
                server.registerTool(
                    self.helloTool,
                    handler: { [weak self] arguments in
                        guard let self = self else {
                            throw MCPError.internalError("Server was deallocated")
                        }
                        return try await self.helloToolHandler(arguments: arguments)
                    }
                )

                return server
            }

            /// 서버 시작
            /// - Parameter transport: 사용할 트랜스포트
            /// - Returns: 시작된 서버 인스턴스
            func startServer(transport: any Transport) async throws -> Server {
                let server = createServer()
                try await server.start(transport: transport)
                return server
            }

            /// 서버를 생성하고 시작하는 래퍼 메서드
            /// 다른 파일에서 접근할 수 있도록 public으로 선언
            /// - Parameter transport: 사용할 트랜스포트
            /// - Returns: 시작된 서버 인스턴스
            public func createAndStartServer(transport: any Transport) async throws -> Server {
                // 매크로가 생성한 함수 호출
                let server = createServer()
                try await server.start(transport: transport)
                return server
            }
            """
        }
    }
}
#endif
